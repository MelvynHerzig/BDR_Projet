-- MySQL Script generated by MySQL Workbench
-- Fri Dec 11 11:16:36 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

DROP SCHEMA IF EXISTS GestionnaireDeTournoisRocketLeague ;

CREATE SCHEMA IF NOT EXISTS GestionnaireDeTournoisRocketLeague DEFAULT CHARACTER SET utf8mb4 ;
USE GestionnaireDeTournoisRocketLeague ;


CREATE TABLE Prix 
(
  id INT AUTO_INCREMENT,
  montantArgent DECIMAL(10,2) NOT NULL,
  CONSTRAINT PK_Prix PRIMARY KEY (id)
);


CREATE TABLE Tournoi
(
  id INT AUTO_INCREMENT,
  dateHeureDebut DATETIME NOT NULL,
  dateHeureFin DATETIME,
  nom VARCHAR(50) NOT NULL,
  nbEquipesMax INT NOT NULL,
  idPrixPremier INT NULL,
  idPrixSecond INT NULL,
  CONSTRAINT PK_Tournoi PRIMARY KEY (id)
);


CREATE TABLE Tour
(
  no INT,
  longueurMaxSerie INT NOT NULL,
  idTournoi INT NOT NULL,
  CONSTRAINT PK_Tour PRIMARY KEY (no, idTournoi)
);


CREATE TABLE Serie
(
  id INT,
  noTour INT NOT NULL,
  idTournoi INT NOT NULL,
  CONSTRAINT PK_Serie PRIMARY KEY (id, noTour, idTournoi)
);


CREATE TABLE `Match`
(
  id INT,
  idSerie INT NOT NULL,
  noTour INT NOT NULL,
  idTournoi INT NOT NULL,
  CONSTRAINT PK_Match PRIMARY KEY (id, idSerie, noTour, idTournoi)
);


CREATE TABLE Objet 
(
  id INT AUTO_INCREMENT,
  nom VARCHAR(100) NOT NULL,
  CONSTRAINT PK_Objet PRIMARY KEY (id)
);


CREATE TABLE Joueur
(
  id INT AUTO_INCREMENT,
  nom VARCHAR(50) NOT NULL,
  prenom VARCHAR(50) NOT NULL,
  email VARCHAR(250) NOT NULL,
  pseudo VARCHAR(50) NOT NULL,
  dateNaissance DATE NOT NULL,
  CONSTRAINT PK_Joueur PRIMARY KEY (id)
);


CREATE TABLE Equipe
(
  acronyme VARCHAR(3),
  nom VARCHAR(100) NOT NULL,
  idResponsable INT NOT NULL,
  CONSTRAINT PK_Equipe PRIMARY KEY (acronyme)
);


CREATE TABLE Equipe_Joueur
(
  acronymeEquipe VARCHAR(3) NOT NULL,
  idJoueur INT NOT NULL,
  dateHeureArrivee DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  dateHeureDepart DATETIME,
  CONSTRAINT PK_Equipe_Joueur PRIMARY KEY (acronymeEquipe, idJoueur, dateHeureArrivee)
);


CREATE TABLE Match_Joueur 
(
  idJoueur INT NOT NULL,
  nbButs INT UNSIGNED NOT NULL,
  nbArrets INT UNSIGNED NOT NULL,
  idMatch INT NOT NULL,
  idSerie INT NOT NULL,
  noTour INT NOT NULL,
  idTournoi INT NOT NULL,
  CONSTRAINT PK_Match_Joueur PRIMARY KEY (idJoueur, idMatch, idSerie, noTour, idTournoi)
);


CREATE TABLE Tournoi_Equipe
(
  idTournoi INT NOT NULL,
  acronymeEquipe VARCHAR(3) NOT NULL,
  dateInscription DATETIME NOT NULL,
  CONSTRAINT PK_Tournoi_Equipe PRIMARY KEY (idTournoi, acronymeEquipe)
);


CREATE TABLE Prix_Objet 
(
  idPrix INT NOT NULL,
  idObjet INT NOT NULL,
  CONSTRAINT PK_Prix_Objet PRIMARY KEY (idPrix, idObjet)
);


CREATE TABLE Serie_Equipe
(
  acronymeEquipe VARCHAR(3) NOT NULL,
  idSerie INT NOT NULL,
  noTour INT NOT NULL,
  idTournoi INT NOT NULL,
  CONSTRAINT PK_Serie_Equipe PRIMARY KEY (acronymeEquipe, idSerie, noTour, idTournoi)
);

-----------------------------------------------------
-- Ajout de contraintes + index pour la table Tournoi
-----------------------------------------------------
ALTER TABLE Tournoi ADD CONSTRAINT FK_Tournoi_idPrixPremier
	FOREIGN KEY (idPrixPremier) 
	REFERENCES Prix (id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Tournoi ADD CONSTRAINT FK_Tournoi_idPrixSecond 
	FOREIGN KEY (idPrixSecond) 
	REFERENCES Prix (id)
	ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Tournoi ADD INDEX FK_Tournoi_idPrixPremier_idx (idPrixPremier);
ALTER TABLE Tournoi ADD INDEX FK_Tournoi_idPrixSecond_idx (idPrixSecond);

---------------------------------------------------
-- Ajout de contraintes + index  pour la table Tour
---------------------------------------------------

ALTER TABLE Tour ADD CONSTRAINT FK_Tour_idTournoi
    FOREIGN KEY (idTournoi)
    REFERENCES Tournoi (id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE Tour ADD INDEX FK_Tour_idTournoi_idx (idTournoi);

---------------------------------------------------
-- Ajout de contraintes + index pour la table Serie
---------------------------------------------------
ALTER TABLE Serie ADD CONSTRAINT FK_Serie_idTour
    FOREIGN KEY (noTour , idTournoi)
    REFERENCES Tour (no , idTournoi)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE Serie ADD INDEX FK_Serie_idTour_idx (noTour, idTournoi);

---------------------------------------------------
-- Ajout de contraintes + index pour la table Match
---------------------------------------------------
ALTER TABLE `Match` ADD CONSTRAINT FK_Match_idSerie
    FOREIGN KEY (idSerie , noTour , idTournoi)
    REFERENCES Serie (id , noTour , idTournoi)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE `Match` ADD INDEX FK_Match_idSerie_idx (idSerie, noTour, idTournoi);

-----------------------------------------------------
-- Ajout de contraintes + index  pour la table Equipe
-----------------------------------------------------
ALTER TABLE Equipe ADD  CONSTRAINT FK_Equipe_idJoueur
    FOREIGN KEY (idResponsable)
    REFERENCES Joueur (id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Equipe ADD INDEX FK_Equipe_idResponsable_idx (idResponsable);
ALTER TABLE Equipe ADD UNIQUE INDEX UC_Equipe_idResponsable_idx (idResponsable);

------------------------------------------------------------
-- Ajout de contraintes + index  pour la table Equipe_Joueur
------------------------------------------------------------
ALTER TABLE Equipe_Joueur ADD CONSTRAINT FK_Equipe_Joueur_idEquipe
    FOREIGN KEY (acronymeEquipe)
    REFERENCES Equipe (acronyme)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Equipe_Joueur ADD CONSTRAINT FK_Equipe_Joueur_idJoueur
    FOREIGN KEY (idJoueur)
    REFERENCES Joueur (id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Equipe_Joueur ADD INDEX FK_Equipe_Joueur_idJoueur_idx (idJoueur);
ALTER TABLE Equipe_Joueur ADD INDEX FK_Equipe_Joueur_idEquipe_idx (acronymeEquipe);
ALTER TABLE Equipe_Joueur ADD INDEX FK_Equipe_Joueur_dateHeureArrivee_idx (dateHeureArrivee);

-----------------------------------------------------------
-- Ajout de contraintes + index  pour la table Match_Joueur
-----------------------------------------------------------
ALTER TABLE Match_Joueur ADD CONSTRAINT FK_Match_Joueur_idJoueur
    FOREIGN KEY (idJoueur)
    REFERENCES Joueur (id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Match_Joueur ADD CONSTRAINT FK_Match_Joueur_idMatch
    FOREIGN KEY (idMatch , idSerie , noTour , idTournoi)
    REFERENCES `Match` (id , idSerie , noTour , idTournoi)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Match_Joueur ADD INDEX FK_Match_Joueur_idJoueur_idx (idJoueur);
ALTER TABLE Match_Joueur ADD INDEX FK_Match_Joueur_idMatch_idx (idMatch, idSerie, noTour, idTournoi);

-------------------------------------------------------------
-- Ajout de contraintes + index  pour la table Tournoi_Equipe
-------------------------------------------------------------
ALTER TABLE Tournoi_Equipe ADD CONSTRAINT FK_Tournoi_Equipe_idTournoi
    FOREIGN KEY (idTournoi)
    REFERENCES Tournoi (id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE Tournoi_Equipe ADD CONSTRAINT FK_Tournoi_Equipe_idEquipe
    FOREIGN KEY (acronymeEquipe)
    REFERENCES Equipe (acronyme)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Tournoi_Equipe ADD INDEX FK_Tournoi_Equipe_idEquipe_idx (acronymeEquipe);
ALTER TABLE Tournoi_Equipe ADD INDEX FK_Tournoi_Equipe_idTournoi_idx (idTournoi);

---------------------------------------------------------
-- Ajout de contraintes + index  pour la table Prix_Objet
---------------------------------------------------------
ALTER TABLE Prix_Objet ADD CONSTRAINT FK_Prix_Objet_idPrix
    FOREIGN KEY (idPrix)
    REFERENCES Prix (id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE Prix_Objet ADD CONSTRAINT FK_Prix_Objet_idObjet
    FOREIGN KEY (idObjet)
    REFERENCES Objet (id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Prix_Objet ADD INDEX FK_Prix_Objet_idObjet_idx (idObjet);
ALTER TABLE Prix_Objet ADD INDEX FK_Prix_Objet_idPrix_idx (idPrix);

---------------------------------------------------------
-- Ajout de contraintes + index  pour la table Objet
---------------------------------------------------------
ALTER TABLE Objet ADD UNIQUE INDEX UC_Objet_nom_idx (nom);

-----------------------------------------------------------
-- Ajout de contraintes + index  pour la table Serie_Equipe
-----------------------------------------------------------
ALTER TABLE Serie_Equipe ADD CONSTRAINT FK_Serie_Equipe_idEquipe
    FOREIGN KEY (acronymeEquipe)
    REFERENCES Equipe (acronyme)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Serie_Equipe ADD CONSTRAINT FK_Serie_Equipe_idSerie
    FOREIGN KEY (idSerie , noTour , idTournoi)
    REFERENCES Serie (id , noTour , idTournoi)
    ON DELETE RESTRICT
    ON UPDATE CASCADE;

ALTER TABLE Serie_Equipe ADD INDEX FK_Serie_Equipe_idEquipe_idx (acronymeEquipe);
ALTER TABLE Serie_Equipe ADD INDEX FK_Serie_Equipe_idSerie_idx (idSerie, noTour, idTournoi);

------------------------------------------------------
-- Ajout de contraintes + index  pour la table Joueur
-----------------------------------------------------
ALTER TABLE Joueur ADD UNIQUE INDEX UC_Joueur_email_idx (email);

-----------------------------------------------------
-- CONTRAINTES D'INTEGRITES
-----------------------------------------------------

-- --------------------- TOURNOI --------------------
-- Bon nombre d'équipe max dans un tournoi
DELIMITER $$
CREATE PROCEDURE verifierNbEquipesMax(nbEquipe INT)
BEGIN
	 IF FIND_IN_SET( LOG2(nbEquipe) , "1,2,3,4,5,6,7,8") = 0 THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'nbEquipesMax doit être une puissance de 2 entre 2 et 256.';
	 END IF;
END
$$

DELIMITER $$
CREATE TRIGGER verifierNbEquipesMaxInsertion
BEFORE INSERT
ON tournoi
FOR EACH ROW
BEGIN
    CALL verifierNbEquipesMax(NEW.nbEquipesMax);
END
$$

DELIMITER $$
CREATE TRIGGER verifierNbEquipesMaxMiseAJour
BEFORE INSERT
ON tournoi
FOR EACH ROW
BEGIN
    CALL verifierNbEquipesMax(NEW.nbEquipesMax);
END
$$

-- Vérification que la date de début du tournoi soit plus petite que la date de fin 
ALTER TABLE Tournoi ADD CONSTRAINT CHK_Tournoi_datesDebutFin CHECK (dateHeureDebut < dateHeureFin);

-- Vérification que la date de début soit plus petite que la date courante

DELIMITER $$
CREATE PROCEDURE verifierDateAncienne(dateComparer DATETIME)
BEGIN
	 IF dateComparer <= NOW() THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le début du tournoi ne peut être plus petit que le temps présent.';
	END IF;
END
$$

DELIMITER $$
CREATE TRIGGER verifierDateHeureDebutInsertion
BEFORE INSERT
ON tournoi
FOR EACH ROW
BEGIN
    CALL verifierDateAncienne(NEW.dateHeureDebut);
END
$$

DELIMITER $$
CREATE TRIGGER verifierDateHeureDebutMiseAJour
BEFORE UPDATE
ON tournoi
FOR EACH ROW
BEGIN
    CALL verifierDateAncienne(NEW.dateHeureDebut);
END
$$

-- --------------------- TOURNOI_EQUIPE --------------------
DELIMITER $$
CREATE PROCEDURE verifierDateInscriptionTournoi(dateToCompare DATETIME, idTournoi INT)
BEGIN
	 IF dateToCompare >= (SELECT dateHeureDebut FROM Tournoi WHERE id = idTournoi) THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le tournoi a déjà commencé au moment de l\'inscription';
	END IF;
END
$$


DELIMITER $$
CREATE FUNCTION aUneInscriptionEnCours(acronymeParam VARCHAR(3))
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
	 IF EXISTS (SELECT Tournoi.id FROM Tournoi
				INNER JOIN Tournoi_Equipe
					ON Tournoi.id = Tournoi_Equipe.idTournoi AND Tournoi_Equipe.acronymeEquipe = acronymeParam
				WHERE Tournoi.dateHeureFin IS NULL)
	THEN RETURN 1;
    ELSE RETURN 0;
    END IF;
END
$$

-- Ne peut pas s'inscrire si elle n'a pas trois joueurs
-- Ne peut pas s'inscrire si elle est déjà inscrite à un autre tournoi
-- Peut seulement s'inscrire à un tournoi en attente.
DELIMITER $$
CREATE TRIGGER TournoiEquipeInsertion
BEFORE INSERT
ON Tournoi_Equipe
FOR EACH ROW
BEGIN
    CALL verifierDateInscriptionTournoi(NEW.dateInscription, NEW.idTournoi);
    IF (aUneInscriptionEnCours(NEW.acronymeEquipe))
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'L\'equipe participe déjà à un tournoi';
    END IF;
END
$$

DELIMITER $$
CREATE TRIGGER TournoiEquipeMiseAJour
BEFORE UPDATE
ON Tournoi_Equipe
FOR EACH ROW
BEGIN
    CALL verifierDateInscriptionTournoi(NEW.dateInscription, new.idTournoi);
     IF (NEW.acronymeEquipe <> OLD.acronymeEquipe AND aUneInscriptionEnCours(NEW.acronymeEquipe))
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'L\'equipe participe déjà à un tournoi';
    END IF;
END
$$

-- --------------------- TOUR --------------------
-- Bonne longueur maximale des séries du tour
DELIMITER $$
CREATE PROCEDURE verifierLongueurMaxSerie(longueurSerie INT)
BEGIN
	 IF FIND_IN_SET( longueurSerie , "1,3,5,7") = 0 THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Une série ne peut se dérouler qu\'en 3,5 ou 7 matchs';
	 END IF;
END
$$

DELIMITER $$
CREATE TRIGGER verifierLongueurMaxSerieInsertion
BEFORE INSERT
ON Tour
FOR EACH ROW
BEGIN
    CALL verifierLongueurMaxSerie(NEW.longueurMaxSerie);
END
$$

DELIMITER $$
CREATE TRIGGER verifierLongueurMaxSerieMiseAJour
BEFORE INSERT
ON Tour
FOR EACH ROW
BEGIN
    CALL verifierLongueurMaxSerie(NEW.longueurMaxSerie);
END
$$

-- --------------------- SERIE EQUIPE --------------------
-- L'équipe est-elle inscrite au tournoi 
DELIMITER $$
CREATE PROCEDURE verifierInscription(acronymeParam VARCHAR(3), idTournoiParam INT)
BEGIN
	 IF NOT EXISTS( SELECT * FROM Tournoi_Equipe WHERE idTournoi = idTournoiParam AND acronymeParam = acronymeEquipe) THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'L\'equipe n\'est pas inscrite au tournoi';
	 END IF;
END
$$
-- L'equipe a elle perdu un match dans le tournoi
-- TODO
-- deux équipes inscrites au tournoi associé et non éliminées.
-- TODO


-- --------------------- MATCH --------------------
-- Pour un match donnée le nombre de but de deux équipe ne peux pas être égal

-- --------------------- MATCH_JOUEUR --------------------
-- Référence un joueur d'une des deux équipes de la série.

-- --------------------- EQUIPE --------------------

-- Le responsable est un joueur, on vérifie à chaque modification de pas pouvoir changer le responsable
DELIMITER $$
CREATE TRIGGER equipeMiseAJour
BEFORE UPDATE
ON Equipe
FOR EACH ROW
BEGIN
	IF(OLD.idresponsable <> NEW.idResponsable)
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le responsable de l\'équipe ne peut être changé';
	END IF;
END
$$

-- Si l'equipe a trois joueur
DELIMITER $$
CREATE FUNCTION estComplete(acronymeParam VARCHAR(3))
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
	IF(3 = (SELECT COUNT(*) FROM Equipe_Joueur WHERE Equipe_Joueur.acronymeEquipe = acronymeParam AND Equipe_Joueur.dateHeureDepart IS NULL AND Equipe_Joueur.dateHeureArrivee <> '0000-00-00 00:00:00'))
	THEN RETURN 1;
    ELSE RETURN 0;
    END IF;
END
$$



-- --------------------- JOUEUR --------------------
-- Retourne l'acronyme de l'équipe du joueur à une date donnée
DELIMITER $$
CREATE FUNCTION equipeDuJoueurLorsDu(idJoueurParam INT, dateParam DATETIME)
RETURNS VARCHAR(3)
DETERMINISTIC
BEGIN
	DECLARE nomEquipe VARCHAR(3);
	SELECT Equipe_Joueur.acronymeEquipe INTO nomEquipe
	FROM Equipe_Joueur
	WHERE idJoueur = idJoueurParam AND dateHeureArrivee = (SELECT MAX(dateHeureArrivee) 
														   FROM Equipe_Joueur 
                                                           WHERE idJoueur = idJoueurParam AND dateHeureArrivee < dateParam AND  (dateHeureDepart IS NULL OR dateHeureDepart > dateParam));
    RETURN nomEquipe;
END
$$

-- Date de naissance plus petite que la date courante
DELIMITER $$
CREATE PROCEDURE verifierDatePlusGrandeQueMaintenant(dateComparer DATETIME)
BEGIN
	 IF dateComparer > NOW() THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La date de naissance est dans le future.';
	END IF;
END
$$

DELIMITER $$
CREATE TRIGGER verifierDateNaissanceInsertion
BEFORE INSERT
ON Joueur
FOR EACH ROW
BEGIN
    CALL  verifierDatePlusGrandeQueMaintenant(NEW.dateNaissance);
END
$$

DELIMITER $$
CREATE TRIGGER verifierDateNaissanceMiseAJour
BEFORE UPDATE
ON Joueur
FOR EACH ROW
BEGIN
    CALL verifierDatePlusGrandeQueMaintenant(NEW.dateNaissance);
END
$$

-- --------------------- JOUEUR EQUIPE --------------------
-- La date d'arrivée est plus petite que la date de départ.
-- Le joueur n'est pas déjà dans une equipe.
DELIMITER $$
CREATE PROCEDURE verifierDateArriveeDepart(arrivee DATETIME, depart DATETIME)
BEGIN
	 IF arrivee > depart THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La date d\'arrivée ne peut être plus grande que la date de départ de l\´équipe.';
	 END IF;
END
$$

DELIMITER $$
CREATE PROCEDURE estDejaDansUneEquipe(idJoueurParam INT)
BEGIN
	 IF EXISTS( SELECT * FROM Equipe_Joueur WHERE idJoueur = idJoueurParam AND dateHeureDepart IS NULL) THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le joueur est déjà dans une équipe';
	END IF;
END
$$

DELIMITER $$
CREATE TRIGGER verifierEquipeJoueurInsertion
BEFORE INSERT
ON Equipe_Joueur
FOR EACH ROW
BEGIN
    CALL  verifierDateArriveeDepart(NEW.dateHeureArrivee,NEW.dateHeureDepart);
    IF ( estComplete(NEW.acronymeEquipe) )
    THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Impossible de rejoindre l\'equipe, elle est complète';
    END IF;
    IF (NEW.dateHeureArrivee <> '0000-00-00 00:00:00') 
		THEN CALL estDejaDansUneEquipe(NEW.idJoueur);
	END IF;
END
$$

DELIMITER $$
CREATE TRIGGER verifierEquipeJoueurMiseAJour
BEFORE UPDATE
ON Equipe_Joueur
FOR EACH ROW
BEGIN
    CALL verifierDateArriveeDepart(NEW.dateHeureArrivee,NEW.dateHeureDepart);
    -- Si on tente de lui le re-refaire rejoindre l'équipe avec le même enregistrement
    IF (NEW.dateHeureDepart IS NULL AND OLD.dateHeureDepart IS NOT NULL) 
		THEN CALL estDejaDansUneEquipe(OLD.idJoueur);
	END IF;
    -- Si on tente de lui faire quitter l'équipe
    IF (NEW.dateHeureDepart IS NOT NULL AND OLD.dateHeureDepart IS NULL) THEN
		-- Est-ce que son équipe participe à un tournoi.
        IF( aUneInscriptionEnCours(OLD.acronymeEquipe) ) THEN 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le joueur ne peut pas quitter une équipe inscrite à un tournoi.';
        END IF;
	END IF;
    IF(OLD.idJoueur = (SELECT idResponsable FROM Equipe WHERE Equipe.acronyme = OLD.acronymeEquipe) AND NEW.dateHeureDepart IS NOT NULL)
    THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le responsable ne peut pas quitter son équiper, on a besoin de lui.';
	END IF;
END
$$


-----------------------------------------------------
-- DONNEES
------------------------------------------------------
INSERT INTO Objet (nom)
VALUES 
( "Clavier Roccat" ),
( "Souris Roccat" ),
( "Casque Logitec" ),
( "Ecran BenQ" ),
( "PC  Alienware" );

INSERT INTO Prix (montantArgent)
VALUES 
( 50.00 ),
( 100.00 ),
( 150.00 ),
( 500.00 ),
( 1500.00 ),
( 200.00 ),
( 300.00 );

INSERT INTO Prix_Objet 
VALUES 
( 1, 1 ),
( 2, 2 ),
( 3, 3 ),
( 4, 4 ),
( 5, 5 );

INSERT INTO Joueur (nom, prenom, email, pseudo, dateNaissance)
VALUES 
( "Forestier", "Qunetin", "quentin.forestier@heig-vd.ch", "Dudude", "2001-05-16" ),
( "Herzig", "Melvyn", "melvyn.herzig@heig-vd.ch", "Wheald", "1997-09-11" ),
( "Crausaz", "Nicolas", "nicolas.crausaz@heig-vd.ch", "itsaboi", "1999-08-03" ),
( "Brescard", "Julien", "Jujuju@lse.ch", "Jujuju", "2002-09-16" ),
( "Baggiolini", "Jonas", "Arcko0o@lse.ch", "Arcko0o", "2000-11-15" ),
( "Eggenberger", "Kevin", "Keever@lse.ch", "Keever", "1999-01-10" ),
( "Candolfi", "Kérian", "Kerian@solary.fr", "Kérian", "2003-08-21" ),
( "Bigeard", "Brice", "ExoTiiK@solary.fr", "ExoTiiK", "2002-10-31" ),
( "Schäfer", "Damian", "Tox@solary.fr", "Tox", "2003-06-08" ),
( "Packwood-Clarke", "Jack", "Speed@teamliquid.com", "Speed", "2001-02-26" ),
( "Moselund", "Emil", "fruity@teamliquid.com", "fruity", "1996-02-22" ),
( "Hodzic", "Aldin", "Ronaky@teamliquid.com", "Ronaky", "2000-09-21" ),
( "Jakober", "Lukas", "Zaphare@eldelweiss.ch", "Zaphare", "2000-04-07" ),
( "Lentz", "Quentin", "Mirror@eldelweiss.ch", "Mirror", "2002-09-05" ),
( "Sauvey", "Baptiste", "BatOu@eldelweiss.ch", "BatOu", "2001-10-28" ),
( "Courant", "Alexandre", "Kaydop@vitality.fr", "Kaydop", "1998-05-22" ),
( "Champenois", "Yanis", "Alpha54@vitality.fr", "Alpha54", "2003-05-27" ),
( "Loquet", "Victor", "Fairy_Peak@vitality.fr", "Fairy Peak!", "1998-05-26" ),
( "Van Meurs", "Jos", "ViolentPanda@dignitas.com", "ViolentPanda", "1998-11-02" ),
( "Robben", "Joris", "Joreuz@dignitas.com", "Joreuz", "2005-03-08" ),
( "Benton", "Jack", "ApparentlyJack@dignitas.com", "ApparentlyJack", "2003-09-23" ),
( "Oosting", "Ronald", "Tahz@fcbarcelona.com", "Tahz", "1999-08-03" ),
( "Lazarus", "Fredi", "Blurry@fcbarcelona.com", "Blurry", "2004-06-30" ),
( "Gimenez", "Nacho", "Nachitow@fcbarcelona.com", "Nachitow", "2000-06-20" ),
( "Driessen", "Mitchell", "Mittaen@galaxyracer.com", "Mittaen", "2000-06-20" ),
( "Pickering", "Dylan", "eekso@galaxyracer.com", "eekso", "2002-06-29" ),
( "Berdin", "Ario", "arju@galaxyracer.com", "arju", "2002-11-04" ),
( "Bosch", "Marc", "Stake@giantsgaming.com", "Stake", "2000-07-20" ),
( "Cortés", "Samuel", "Zamué@giantsgaming.com", "Zamué", "2000-10-19" ),
( "Benayachi", "Amine", "itachi@giantsgaming.com", "itachi", "2003-08-13" ),
( "Benayachi2", "Amine", "itachi@giantsgaming2.com", "itachi", "2003-08-13" );

INSERT INTO Equipe
VALUES 
( "ROC", "Real Original Cracks", 1 ),
( "LSE", "Lausanne eSports", 4 ),
( "SLY", "Solary", 7 ),
( "TL", "Team Liquid", 10 ),
( "EE", "Eldelweiss ESports", 13 ),
( "VIT", "Renault Vitality", 16 ),
( "DIG", "Dignitas", 19 ),
( "FCB", "FC Barcelona", 22 ),
( "GAR", "Galaxy Racer", 25 ),
( "GIA", "Giants Gaming", 28 ),
( "TRC", "Truc",  31);


INSERT INTO Equipe_Joueur
VALUES 
( "EE", 3,  "2016-01-01 00-00-00","2016-02-01 00-00-00"),
( "ROC", 1,  "2020-01-01 00-00-00", NULL),
( "ROC", 2,  "2020-01-01 00-00-00", NULL),
( "ROC", 3,  "2020-01-01 00-00-00", NULL),
( "LSE", 4,  "2020-01-01 00-00-00", NULL),
( "LSE", 5,  "2020-01-01 00-00-00", NULL),
( "LSE", 6,  "2020-01-01 00-00-00", NULL),
( "SLY", 7,  "2020-01-01 00-00-00", NULL),
( "SLY", 8,  "2020-01-01 00-00-00", NULL),
( "SLY", 9,  "2020-01-01 00-00-00", NULL),
( "TL", 10,  "2020-01-01 00-00-00", NULL),
( "TL", 11,  "2020-01-01 00-00-00", NULL),
( "TL", 12,  "2020-01-01 00-00-00", NULL),
( "EE", 13,  "2020-01-01 00-00-00", NULL),
( "EE", 14,  "2020-01-01 00-00-00", NULL),
( "EE", 15,  "2020-01-01 00-00-00", NULL),
( "VIT", 16,  "2020-01-01 00-00-00", NULL),
( "VIT", 17,  "2020-01-01 00-00-00", NULL),
( "VIT", 18,  "2020-01-01 00-00-00", NULL),
( "DIG", 19,  "2020-01-01 00-00-00", NULL),
( "DIG", 20,  "2020-01-01 00-00-00", NULL),
( "DIG", 21,  "2020-01-01 00-00-00", NULL),
( "FCB", 22,  "2020-01-01 00-00-00", NULL),
( "FCB", 23,  "2020-01-01 00-00-00", NULL),
( "FCB", 24,  "2020-01-01 00-00-00", NULL),
( "GAR", 25,  "2020-01-01 00-00-00", NULL),
( "GAR", 26,  "2020-01-01 00-00-00", NULL),
( "GAR", 27,  "2020-01-01 00-00-00", NULL),
( "GIA", 28,  "2020-01-01 00-00-00", NULL),
( "GIA", 29,  "2020-01-01 00-00-00", NULL),
( "GIA", 30,  "2020-01-01 00-00-00", NULL);


INSERT INTO Tournoi (dateHeureDebut, nom, nbEquipesMax, dateHeureFin)
VALUES 
( "2021-02-01 20:00:00", 'Le Franco-Suisse', 4, '2021-02-01 23:00:00' ),
( "2021-03-01 20:00:00", 'IEM', 8, NULL );

INSERT INTO Tour
VALUES 
( 2, 1, 1 ),
( 1, 3, 1 ),
( 3, 1, 2 ),
( 2, 1, 2 ),
( 1, 3, 2 );

INSERT INTO Serie
VALUES 
( 1, 2, 1 ),
( 2, 2, 1 ),
( 1, 1, 1 ),
( 1, 3, 2 ),
( 2, 3, 2 ),
( 3, 3, 2 ),
( 4, 3, 2 ),
( 1, 2, 2 ),
( 2, 2, 2 ),
( 1, 1, 2 );


INSERT INTO `Match`
VALUES 
( 1, 1, 2, 1 ),
( 1, 2, 2, 1 ),
( 1, 1, 1, 1 ),
( 2, 1, 1, 1 ),
( 1, 1, 3, 2 ),
( 1, 2, 3, 2 ),
( 1, 3, 3, 2 ),
( 1, 4, 3, 2 ),
( 1, 1, 2, 2 ),
( 1, 2, 2, 2 ),
( 1, 1, 1, 2 ),
( 2, 1, 1, 2 );


INSERT INTO Match_Joueur (idJoueur, nbButs, nbArrets, idMatch, idSerie, noTour, idTournoi)
VALUES 
( 1, 3, 1, 1, 1, 2, 1 ),
( 2, 0, 3, 1, 1, 2, 1 ),
( 3, 1, 2, 1, 1, 2, 1 ),
( 7, 0, 2, 1, 1, 2, 1 ),
( 8, 1, 0, 1, 1, 2, 1 ),
( 9, 1, 4, 1, 1, 2, 1 ),

( 13, 3, 1, 1, 2, 2, 1 ),
( 14, 0, 3, 1, 2, 2, 1 ),
( 15, 4, 2, 1, 2, 2, 1 ),
( 16, 1, 2, 1, 2, 2, 1 ),
( 17, 1, 0, 1, 2, 2, 1 ),
( 18, 1, 4, 1, 2, 2, 1 ),

( 1, 1, 5, 1, 1, 1, 1 ),
( 2, 0, 3, 1, 1, 1, 1 ),
( 3, 1, 2, 1, 1, 1, 1 ),
( 13, 0, 2, 1, 1, 1, 1 ),
( 14, 0, 3, 1, 1, 1, 1 ),
( 15, 0, 4, 1, 1, 1, 1 ),

( 1, 6, 1, 2, 1, 1, 1 ),
( 2, 2, 3, 2, 1, 1, 1 ),
( 3, 4, 2, 2, 1, 1, 1 ),
( 13, 1, 5, 2, 1, 1, 1 ),
( 14, 0, 1, 2, 1, 1, 1 ),
( 15, 1, 4, 2, 1, 1, 1 ),

( 1, 0, 5, 1, 1, 3, 2 ),
( 2, 3, 1, 1, 1, 3, 2 ),
( 3, 4, 2, 1, 1, 3, 2 ),
( 10, 0, 1, 1, 1, 3, 2 ),
( 11, 1, 3, 1, 1, 3, 2 ),
( 12, 2, 0, 1, 1, 3, 2 ),

( 13, 2, 8, 1, 2, 3, 2 ),
( 14, 3, 2, 1, 2, 3, 2 ),
( 15, 1, 0, 1, 2, 3, 2 ),
( 16, 1, 4, 1, 2, 3, 2 ),
( 17, 0, 1, 1, 2, 3, 2 ),
( 18, 1, 3, 1, 2, 3, 2 ),

( 19, 0, 0, 1, 3, 3, 2 ),
( 20, 0, 3, 1, 3, 3, 2 ),
( 21, 1, 0, 1, 3, 3, 2 ),
( 4, 3, 3, 1, 3, 3, 2 ),
( 5, 6, 2, 1, 3, 3, 2 ),
( 6, 1, 9, 1, 3, 3, 2 ),

( 22, 3, 1, 1, 4, 3, 2 ),
( 23, 0, 4, 1, 4, 3, 2 ),
( 24, 1, 1, 1, 4, 3, 2 ),
( 7, 4, 1, 1, 4, 3, 2 ),
( 8, 2, 2, 1, 4, 3, 2 ),
( 9, 0, 7, 1, 4, 3, 2 ),

( 1, 3, 4, 1, 1, 2, 2 ),
( 2, 2, 0, 1, 1, 2, 2 ),
( 3, 1, 5, 1, 1, 2, 2 ),
( 13, 0, 4, 1, 1, 2, 2 ),
( 14, 2, 1, 1, 1, 2, 2 ),
( 15, 1, 3, 1, 1, 2, 2 ),

( 4, 3, 2, 1, 2, 2, 2 ),
( 5, 0, 7, 1, 2, 2, 2 ),
( 6, 5, 1, 1, 2, 2, 2 ),
( 7, 1, 3, 1, 2, 2, 2 ),
( 8, 1, 6, 1, 2, 2, 2 ),
( 9, 2, 2, 1, 2, 2, 2 ),

( 1, 1, 3, 1, 1, 1, 2 ),
( 2, 1, 4, 1, 1, 1, 2 ),
( 3, 0, 5, 1, 1, 1, 2 ),
( 4, 0, 2, 1, 1, 1, 2 ),
( 5, 1, 3, 1, 1, 1, 2 ),
( 6, 0, 4, 1, 1, 1, 2 ),

( 1, 1, 1, 2, 1, 1, 2 ),
( 2, 1, 5, 2, 1, 1, 2 ),
( 3, 1, 2, 2, 1, 1, 2 ),
( 4, 0, 1, 2, 1, 1, 2 ),
( 5, 1, 3, 2, 1, 1, 2 ),
( 6, 1, 6, 2, 1, 1, 2 );


INSERT INTO Tournoi_Equipe
VALUES 
( 1, "ROC", "2020-01-01 20-00-00" ),
( 1, "SLY", "2020-01-01 20-01-00" ),
( 1, "EE", "2020-01-01 20-02-00" ),
( 1, "VIT", "2020-01-01 20-02-00" ),

( 2, "ROC", "2020-02-01 20-00-00" ),
( 2, "TL", "2020-02-01 20-01-00" ),
( 2, "EE", "2020-02-01 20-02-00" ),
( 2, "VIT", "2020-02-01 20-03-00" ),
( 2, "DIG", "2020-02-01 20-04-00" ),
( 2, "LSE", "2020-02-01 20-05-00" ),
( 2, "FCB", "2020-02-01 20-05-00" ),
( 2, "SLY", "2020-02-01 20-06-00" );

INSERT INTO Serie_Equipe
VALUES 
( "ROC", 1, 2, 1 ),
( "SLY", 1, 2, 1 ),
( "EE", 2, 2, 1 ),
( "VIT", 2, 2, 1 ),
( "ROC", 1, 1, 1 ),
( "EE", 1, 1, 1 ),
( "ROC", 1, 3, 2 ),
( "TL", 1, 3, 2 ),
( "EE", 2, 3, 2 ),
( "VIT", 2, 3, 2 ),
( "DIG", 3, 3, 2 ),
( "LSE", 3, 3, 2 ),
( "FCB", 4, 3, 2 ),
( "SLY", 4, 3, 2 ),
( "ROC", 1, 2, 2 ),
( "EE", 1, 2, 2 ),
( "LSE", 2, 2, 2 ),
( "SLY", 2, 2, 2 ),
( "ROC", 1, 1, 2 ),
( "LSE", 1, 1, 2 );